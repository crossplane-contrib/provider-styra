// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mistermx/styra-go-client/pkg/client/datasources (interfaces: ClientService)

// Package datasources is a generated GoMock package.
package datasources

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	datasources "github.com/mistermx/styra-go-client/pkg/client/datasources"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// DeleteDatasource mocks base method.
func (m *MockClientService) DeleteDatasource(arg0 *datasources.DeleteDatasourceParams, arg1 ...datasources.ClientOption) (*datasources.DeleteDatasourceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasource", varargs...)
	ret0, _ := ret[0].(*datasources.DeleteDatasourceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasource indicates an expected call of DeleteDatasource.
func (mr *MockClientServiceMockRecorder) DeleteDatasource(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasource", reflect.TypeOf((*MockClientService)(nil).DeleteDatasource), varargs...)
}

// ExecuteDatasource mocks base method.
func (m *MockClientService) ExecuteDatasource(arg0 *datasources.ExecuteDatasourceParams, arg1 ...datasources.ClientOption) (*datasources.ExecuteDatasourceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteDatasource", varargs...)
	ret0, _ := ret[0].(*datasources.ExecuteDatasourceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteDatasource indicates an expected call of ExecuteDatasource.
func (mr *MockClientServiceMockRecorder) ExecuteDatasource(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDatasource", reflect.TypeOf((*MockClientService)(nil).ExecuteDatasource), varargs...)
}

// GetDatasource mocks base method.
func (m *MockClientService) GetDatasource(arg0 *datasources.GetDatasourceParams, arg1 ...datasources.ClientOption) (*datasources.GetDatasourceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatasource", varargs...)
	ret0, _ := ret[0].(*datasources.GetDatasourceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasource indicates an expected call of GetDatasource.
func (mr *MockClientServiceMockRecorder) GetDatasource(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasource", reflect.TypeOf((*MockClientService)(nil).GetDatasource), varargs...)
}

// ListDatasources mocks base method.
func (m *MockClientService) ListDatasources(arg0 *datasources.ListDatasourcesParams, arg1 ...datasources.ClientOption) (*datasources.ListDatasourcesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasources", varargs...)
	ret0, _ := ret[0].(*datasources.ListDatasourcesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasources indicates an expected call of ListDatasources.
func (mr *MockClientServiceMockRecorder) ListDatasources(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasources", reflect.TypeOf((*MockClientService)(nil).ListDatasources), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), arg0)
}

// UpsertDatasource mocks base method.
func (m *MockClientService) UpsertDatasource(arg0 *datasources.UpsertDatasourceParams, arg1 ...datasources.ClientOption) (*datasources.UpsertDatasourceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertDatasource", varargs...)
	ret0, _ := ret[0].(*datasources.UpsertDatasourceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertDatasource indicates an expected call of UpsertDatasource.
func (mr *MockClientServiceMockRecorder) UpsertDatasource(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDatasource", reflect.TypeOf((*MockClientService)(nil).UpsertDatasource), varargs...)
}
