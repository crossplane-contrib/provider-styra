// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mistermx/styra-go-client/pkg/client/stacks (interfaces: ClientService)

// Package stacks is a generated GoMock package.
package stacks

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	stacks "github.com/mistermx/styra-go-client/pkg/client/stacks"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CommitFilesToSourceControlStack mocks base method.
func (m *MockClientService) CommitFilesToSourceControlStack(arg0 *stacks.CommitFilesToSourceControlStackParams, arg1 ...stacks.ClientOption) (*stacks.CommitFilesToSourceControlStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitFilesToSourceControlStack", varargs...)
	ret0, _ := ret[0].(*stacks.CommitFilesToSourceControlStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitFilesToSourceControlStack indicates an expected call of CommitFilesToSourceControlStack.
func (mr *MockClientServiceMockRecorder) CommitFilesToSourceControlStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitFilesToSourceControlStack", reflect.TypeOf((*MockClientService)(nil).CommitFilesToSourceControlStack), varargs...)
}

// CreateStack mocks base method.
func (m *MockClientService) CreateStack(arg0 *stacks.CreateStackParams, arg1 ...stacks.ClientOption) (*stacks.CreateStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStack", varargs...)
	ret0, _ := ret[0].(*stacks.CreateStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockClientServiceMockRecorder) CreateStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockClientService)(nil).CreateStack), varargs...)
}

// DeleteStack mocks base method.
func (m *MockClientService) DeleteStack(arg0 *stacks.DeleteStackParams, arg1 ...stacks.ClientOption) (*stacks.DeleteStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStack", varargs...)
	ret0, _ := ret[0].(*stacks.DeleteStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockClientServiceMockRecorder) DeleteStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockClientService)(nil).DeleteStack), varargs...)
}

// DeleteUserBranchStack mocks base method.
func (m *MockClientService) DeleteUserBranchStack(arg0 *stacks.DeleteUserBranchStackParams, arg1 ...stacks.ClientOption) (*stacks.DeleteUserBranchStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserBranchStack", varargs...)
	ret0, _ := ret[0].(*stacks.DeleteUserBranchStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserBranchStack indicates an expected call of DeleteUserBranchStack.
func (mr *MockClientServiceMockRecorder) DeleteUserBranchStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserBranchStack", reflect.TypeOf((*MockClientService)(nil).DeleteUserBranchStack), varargs...)
}

// Func2 mocks base method.
func (m *MockClientService) Func2(arg0 *stacks.Func2Params, arg1 ...stacks.ClientOption) (*stacks.Func2OK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Func2", varargs...)
	ret0, _ := ret[0].(*stacks.Func2OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Func2 indicates an expected call of Func2.
func (mr *MockClientServiceMockRecorder) Func2(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Func2", reflect.TypeOf((*MockClientService)(nil).Func2), varargs...)
}

// GetSourceControlFilesBranchStack mocks base method.
func (m *MockClientService) GetSourceControlFilesBranchStack(arg0 *stacks.GetSourceControlFilesBranchStackParams, arg1 ...stacks.ClientOption) (*stacks.GetSourceControlFilesBranchStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSourceControlFilesBranchStack", varargs...)
	ret0, _ := ret[0].(*stacks.GetSourceControlFilesBranchStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceControlFilesBranchStack indicates an expected call of GetSourceControlFilesBranchStack.
func (mr *MockClientServiceMockRecorder) GetSourceControlFilesBranchStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceControlFilesBranchStack", reflect.TypeOf((*MockClientService)(nil).GetSourceControlFilesBranchStack), varargs...)
}

// GetSourceControlFilesMasterStack mocks base method.
func (m *MockClientService) GetSourceControlFilesMasterStack(arg0 *stacks.GetSourceControlFilesMasterStackParams, arg1 ...stacks.ClientOption) (*stacks.GetSourceControlFilesMasterStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSourceControlFilesMasterStack", varargs...)
	ret0, _ := ret[0].(*stacks.GetSourceControlFilesMasterStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceControlFilesMasterStack indicates an expected call of GetSourceControlFilesMasterStack.
func (mr *MockClientServiceMockRecorder) GetSourceControlFilesMasterStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceControlFilesMasterStack", reflect.TypeOf((*MockClientService)(nil).GetSourceControlFilesMasterStack), varargs...)
}

// GetStack mocks base method.
func (m *MockClientService) GetStack(arg0 *stacks.GetStackParams, arg1 ...stacks.ClientOption) (*stacks.GetStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStack", varargs...)
	ret0, _ := ret[0].(*stacks.GetStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStack indicates an expected call of GetStack.
func (mr *MockClientServiceMockRecorder) GetStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStack", reflect.TypeOf((*MockClientService)(nil).GetStack), varargs...)
}

// ListStacks mocks base method.
func (m *MockClientService) ListStacks(arg0 *stacks.ListStacksParams, arg1 ...stacks.ClientOption) (*stacks.ListStacksOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStacks", varargs...)
	ret0, _ := ret[0].(*stacks.ListStacksOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockClientServiceMockRecorder) ListStacks(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockClientService)(nil).ListStacks), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), arg0)
}

// UpdateStack mocks base method.
func (m *MockClientService) UpdateStack(arg0 *stacks.UpdateStackParams, arg1 ...stacks.ClientOption) (*stacks.UpdateStackOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStack", varargs...)
	ret0, _ := ret[0].(*stacks.UpdateStackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStack indicates an expected call of UpdateStack.
func (mr *MockClientServiceMockRecorder) UpdateStack(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockClientService)(nil).UpdateStack), varargs...)
}

// ValidateStackCompliance mocks base method.
func (m *MockClientService) ValidateStackCompliance(arg0 *stacks.ValidateStackComplianceParams, arg1 ...stacks.ClientOption) (*stacks.ValidateStackComplianceOK, *stacks.ValidateStackComplianceAccepted, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateStackCompliance", varargs...)
	ret0, _ := ret[0].(*stacks.ValidateStackComplianceOK)
	ret1, _ := ret[1].(*stacks.ValidateStackComplianceAccepted)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateStackCompliance indicates an expected call of ValidateStackCompliance.
func (mr *MockClientServiceMockRecorder) ValidateStackCompliance(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStackCompliance", reflect.TypeOf((*MockClientService)(nil).ValidateStackCompliance), varargs...)
}

// ValidateStackTests mocks base method.
func (m *MockClientService) ValidateStackTests(arg0 *stacks.ValidateStackTestsParams, arg1 ...stacks.ClientOption) (*stacks.ValidateStackTestsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateStackTests", varargs...)
	ret0, _ := ret[0].(*stacks.ValidateStackTestsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateStackTests indicates an expected call of ValidateStackTests.
func (mr *MockClientServiceMockRecorder) ValidateStackTests(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStackTests", reflect.TypeOf((*MockClientService)(nil).ValidateStackTests), varargs...)
}
