// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mistermx/styra-go-client/pkg/client/secrets (interfaces: ClientService)

// Package secrets is a generated GoMock package.
package secrets

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	secrets "github.com/mistermx/styra-go-client/pkg/client/secrets"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateUpdateSecret mocks base method.
func (m *MockClientService) CreateUpdateSecret(arg0 *secrets.CreateUpdateSecretParams, arg1 ...secrets.ClientOption) (*secrets.CreateUpdateSecretOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUpdateSecret", varargs...)
	ret0, _ := ret[0].(*secrets.CreateUpdateSecretOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpdateSecret indicates an expected call of CreateUpdateSecret.
func (mr *MockClientServiceMockRecorder) CreateUpdateSecret(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdateSecret", reflect.TypeOf((*MockClientService)(nil).CreateUpdateSecret), varargs...)
}

// DeleteSecret mocks base method.
func (m *MockClientService) DeleteSecret(arg0 *secrets.DeleteSecretParams, arg1 ...secrets.ClientOption) (*secrets.DeleteSecretOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecret", varargs...)
	ret0, _ := ret[0].(*secrets.DeleteSecretOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockClientServiceMockRecorder) DeleteSecret(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockClientService)(nil).DeleteSecret), varargs...)
}

// GetSecret mocks base method.
func (m *MockClientService) GetSecret(arg0 *secrets.GetSecretParams, arg1 ...secrets.ClientOption) (*secrets.GetSecretOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecret", varargs...)
	ret0, _ := ret[0].(*secrets.GetSecretOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientServiceMockRecorder) GetSecret(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClientService)(nil).GetSecret), varargs...)
}

// ListSecrets mocks base method.
func (m *MockClientService) ListSecrets(arg0 *secrets.ListSecretsParams, arg1 ...secrets.ClientOption) (*secrets.ListSecretsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecrets", varargs...)
	ret0, _ := ret[0].(*secrets.ListSecretsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockClientServiceMockRecorder) ListSecrets(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockClientService)(nil).ListSecrets), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), arg0)
}
