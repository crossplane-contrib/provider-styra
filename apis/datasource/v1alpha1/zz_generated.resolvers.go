// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-styra/apis/secret/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DataSource.
func (mg *DataSource) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.AWSECR != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: mg.Spec.ForProvider.AWSECR.DatasourcesV1AWSCommon.Credentials,
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.AWSECR.DatasourcesV1AWSCommon.CredentialsRef,
			Selector:     mg.Spec.ForProvider.AWSECR.DatasourcesV1AWSCommon.CredentialsSelector,
			To: reference.To{
				List:    &v1alpha1.SecretList{},
				Managed: &v1alpha1.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AWSECR.DatasourcesV1AWSCommon.Credentials")
		}
		mg.Spec.ForProvider.AWSECR.DatasourcesV1AWSCommon.Credentials = rsp.ResolvedValue
		mg.Spec.ForProvider.AWSECR.DatasourcesV1AWSCommon.CredentialsRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.BundleS3 != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: mg.Spec.ForProvider.BundleS3.DatasourcesV1AWSCommon.Credentials,
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BundleS3.DatasourcesV1AWSCommon.CredentialsRef,
			Selector:     mg.Spec.ForProvider.BundleS3.DatasourcesV1AWSCommon.CredentialsSelector,
			To: reference.To{
				List:    &v1alpha1.SecretList{},
				Managed: &v1alpha1.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BundleS3.DatasourcesV1AWSCommon.Credentials")
		}
		mg.Spec.ForProvider.BundleS3.DatasourcesV1AWSCommon.Credentials = rsp.ResolvedValue
		mg.Spec.ForProvider.BundleS3.DatasourcesV1AWSCommon.CredentialsRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.GitBlame != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.Credentials),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.CredentialsRef,
			Selector:     mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.CredentialsSelector,
			To: reference.To{
				List:    &v1alpha1.SecretList{},
				Managed: &v1alpha1.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.Credentials")
		}
		mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.Credentials = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.CredentialsRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.GitBlame != nil {
		if mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.Passphrase),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PassphraseRef,
				Selector:     mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PassphraseSelector,
				To: reference.To{
					List:    &v1alpha1.SecretList{},
					Managed: &v1alpha1.Secret{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.Passphrase")
			}
			mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.Passphrase = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PassphraseRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.GitBlame != nil {
		if mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PrivateKey,
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PrivateKeyRef,
				Selector:     mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PrivateKeySelector,
				To: reference.To{
					List:    &v1alpha1.SecretList{},
					Managed: &v1alpha1.Secret{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PrivateKey")
			}
			mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PrivateKey = rsp.ResolvedValue
			mg.Spec.ForProvider.GitBlame.DatasourcesV1GitCommon.SSHCredentials.PrivateKeyRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.GitContent != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.Credentials),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.CredentialsRef,
			Selector:     mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.CredentialsSelector,
			To: reference.To{
				List:    &v1alpha1.SecretList{},
				Managed: &v1alpha1.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.Credentials")
		}
		mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.Credentials = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.CredentialsRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.GitContent != nil {
		if mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.Passphrase),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PassphraseRef,
				Selector:     mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PassphraseSelector,
				To: reference.To{
					List:    &v1alpha1.SecretList{},
					Managed: &v1alpha1.Secret{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.Passphrase")
			}
			mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.Passphrase = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PassphraseRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.GitContent != nil {
		if mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PrivateKey,
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PrivateKeyRef,
				Selector:     mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PrivateKeySelector,
				To: reference.To{
					List:    &v1alpha1.SecretList{},
					Managed: &v1alpha1.Secret{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PrivateKey")
			}
			mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PrivateKey = rsp.ResolvedValue
			mg.Spec.ForProvider.GitContent.DatasourcesV1GitCommon.SSHCredentials.PrivateKeyRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.GitRego != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.Credentials),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.CredentialsRef,
			Selector:     mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.CredentialsSelector,
			To: reference.To{
				List:    &v1alpha1.SecretList{},
				Managed: &v1alpha1.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.Credentials")
		}
		mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.Credentials = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.CredentialsRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.GitRego != nil {
		if mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.Passphrase),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PassphraseRef,
				Selector:     mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PassphraseSelector,
				To: reference.To{
					List:    &v1alpha1.SecretList{},
					Managed: &v1alpha1.Secret{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.Passphrase")
			}
			mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.Passphrase = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PassphraseRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.GitRego != nil {
		if mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PrivateKey,
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PrivateKeyRef,
				Selector:     mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PrivateKeySelector,
				To: reference.To{
					List:    &v1alpha1.SecretList{},
					Managed: &v1alpha1.Secret{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PrivateKey")
			}
			mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PrivateKey = rsp.ResolvedValue
			mg.Spec.ForProvider.GitRego.DatasourcesV1GitCommon.SSHCredentials.PrivateKeyRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.LDAP != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LDAP.Credentials),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LDAP.CredentialsRef,
			Selector:     mg.Spec.ForProvider.LDAP.CredentialsSelector,
			To: reference.To{
				List:    &v1alpha1.SecretList{},
				Managed: &v1alpha1.Secret{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LDAP.Credentials")
		}
		mg.Spec.ForProvider.LDAP.Credentials = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LDAP.CredentialsRef = rsp.ResolvedReference

	}

	return nil
}
